.\" Automatically generated by Pandoc 2.9.2.1
.\"
.TH "NVC" "1" "October 2020" "" ""
.hy
.SH NAME
.PP
nvc - VHDL Compiler and Simulator
.SH SYNOPSIS
.PP
\f[B]nvc\f[R] \f[B]-a\f[R] [\f[I]options\f[R]] \f[I]files\f[R]\&...
.PD 0
.P
.PD
\f[B]nvc\f[R] \f[B]-e\f[R] [\f[I]options\f[R]] \f[I]unit\f[R]
.PD 0
.P
.PD
\f[B]nvc\f[R] \f[B]-r\f[R] [\f[I]options\f[R]] \f[I]unit\f[R]
.SH DESCRIPTION
.PP
NVC is an implementation of the VHDL language as defined by IEEE
standard 1076-1993 and later revisions.
Simulating a design typically involves three steps: analysing one more
more source files into the work library; elaborating a top-level design
unit; and running the elaborated design.
.SH OPTIONS
.PP
NVC accepts three kinds of options: global options; commands; and
options specific to the command.
Global options must be placed before the command and specific options
must be placed after the command.
.PP
Commands can be chained together.
For example to analyse a file \f[C]foo.vhd\f[R] and then elaborate and
run a top-level entity \f[C]bar\f[R]:
.IP
.nf
\f[C]
nvc -a foo.vhd -e bar -r
\f[R]
.fi
.PP
Note that the \f[I]unit\f[R] argument for the \f[C]-r\f[R] run command
is taken from the earlier \f[C]-e\f[R] elaborate command.
.SS Commands
.TP
\f[B]\f[CB]-a\f[B]\f[R] \f[I]files\f[R]
Analyse \f[I]files\f[R] into the work library.
.TP
\f[B]\f[CB]-e\f[B]\f[R] \f[I]unit\f[R]
Elaborate a previously analysed top level design unit.
.TP
\f[B]\f[CB]-r\f[B]\f[R] \f[I]unit\f[R]
Execute a previously elaborated top level design unit.
.TP
\f[B]\f[CB]--dump\f[B]\f[R] \f[I]unit\f[R]
Print out a pseudo-VHDL representation of an analysed unit.
This is usually only useful for debugging the compiler.
.TP
\f[B]\f[CB]--list\f[B]\f[R]
Print all analysed and elaborated units in the library.
.TP
\f[B]\f[CB]--make\f[B]\f[R] \f[I]units\f[R]
Generate a makefile for already analysed units.
.TP
\f[B]\f[CB]--syntax\f[B]\f[R] \f[I]files\f[R]
Check input files for syntax errors only.
.SS Global options
.TP
\f[B]\f[CB]--force-init\f[B]\f[R]
Initialise a library work directory even if it already exists and is
non-empty.
.TP
\f[B]\f[CB]-h\f[B]\f[R], \f[B]\f[CB]--help\f[B]\f[R]
Display usage summary.
.TP
\f[B]\f[CB]--ignore-time\f[B]\f[R]
Do not check the timestamps of source files when the corresponding
design unit is loaded from a library.
.TP
\f[B]\f[CB]-L\f[B]\f[R] \f[I]path\f[R]
Add \f[I]path\f[R] to the list of directories to search for libraries.
See the LIBRARIES section below for details.
.TP
\f[B]\f[CB]--map=\f[B]\f[R]\f[I]name\f[R]\f[B]\f[CB]:\f[B]\f[R]\f[I]path\f[R]
Specify exactly the location of logical library \f[I]name\f[R].
Libraries mapped in this way will not used the normal search path.
.TP
\f[B]\f[CB]--messages=\f[B]\f[R]\f[I]style\f[R]
Select either the \f[I]full\f[R] or \f[I]compact\f[R] message format.
The default full message format is designed for readability whereas the
compact messages can be easily parsed by tools.
.TP
\f[B]\f[CB]--std=\f[B]\f[R]\f[I]rev\f[R]
Select the VHDL standard revision to use.
Specify either the full year such as \f[I]1993\f[R] or the decade such
as \f[I]93\f[R].
The allowed revisions are 1993, 2000, 2002, and 2008.
Note there is very limited supported for any features beyond those in
VHDL-93.
VHDL-87 is not supported.
.TP
\f[B]\f[CB]-v\f[B]\f[R], \f[B]\f[CB]--version\f[B]\f[R]
Display version and copyright information.
.TP
\f[B]\f[CB]--work=\f[B]\f[R]\f[I]name\f[R], \f[B]\f[CB]--work=\f[B]\f[R]\f[I]name\f[R]\f[B]\f[CB]:\f[B]\f[R]\f[I]path\f[R]
Use \f[I]name\f[R] as the work library.
The second variant explicitly specifies the location of the library.
See the LIBRARIES section below for details.
.SS Analysis options
.TP
\f[B]\f[CB]--bootstrap\f[B]\f[R]
Allow compilation of the STANDARD package.
Not intended for end users.
.TP
\f[B]\f[CB]--relax=\f[B]\f[R]\f[I]rules\f[R]
Disable certain pedantic rule checks specified in the comma-separate
list \f[I]rules\f[R].
See RELAXING RULES section below for full list.
.SS Elaboration options
.TP
\f[B]\f[CB]--cover\f[B]\f[R]
Enable code coverage reporting (see the CODE COVERAGE section below).
.TP
\f[B]\f[CB]--dump-llvm\f[B]\f[R]
Print generated LLVM IR prior to optimisation.
.TP
\f[B]\f[CB]--dump-vcode\f[B]\f[R]
Print generated intermediate code.
.TP
\f[B]\f[CB]-g\f[B]\f[R] \f[I]name\f[R]\f[B]\f[CB]=\f[B]\f[R]\f[I]value\f[R]
Override top-level generic \f[I]name\f[R] name with \f[I]value\f[R].
Integers, enumeration literals, and string literals are supported.
For example \f[C]-gI=5\f[R], \f[C]-gINIT=\[aq]1\[aq]\f[R], and
\f[C]-gSTR=hello\f[R].
.TP
\f[B]\f[CB]-O0\f[B]\f[R], \f[B]\f[CB]-01\f[B]\f[R], \f[B]\f[CB]-02\f[B]\f[R], \f[B]\f[CB]-03\f[B]\f[R]
Set LLVM optimisation level.
Default is \f[C]-O2\f[R].
.TP
\f[B]\f[CB]-V\f[B]\f[R], \f[B]\f[CB]--verbose\f[B]\f[R]
Prints resource usage information after each elaboration step.
.SS Runtime options
.TP
\f[B]\f[CB]--exit-severity=\f[B]\f[R]\f[I]level\f[R]
Terminate the simulation after an assertion failures of severity greater
than or equal to \f[I]level\f[R].
Valid levels are \f[C]note\f[R], \f[C]warning\f[R], \f[C]error\f[R], and
\f[C]failure\f[R].
The default is \f[C]error\f[R].
.TP
\f[B]\f[CB]--format=\f[B]\f[R]\f[I]fmt\f[R]
Generate waveform data in format \f[I]fmt\f[R].
Currently supported formats are: \f[C]fst\f[R] and \f[C]vcd\f[R].
The FST format is native to GtkWave.
The FST format is preferred over VCD due its smaller size and better
performance.
VCD is a very widely used format but has limited ability to represent
VHDL types and the performance is poor: select this only if you must use
the output with a tool that does not support FST.
The default format is FST if this option is not provided.
Note that GtkWave 3.3.79 or later is required to view the FST output.
.TP
\f[B]\f[CB]--include=\f[B]\f[R]\f[I]glob\f[R], \f[B]\f[CB]--exclude=\f[B]\f[R]\f[I]glob\f[R]
Signals that match \f[I]glob\f[R] are included in or excluded from the
waveform dump.
See section SELECTING SIGNALS for details on how to select particular
signals.
These options can be given multiple times.
.TP
\f[B]\f[CB]--load=\f[B]\f[R]\f[I]plugin\f[R]
Loads a VHPI plugin from the shared library \f[I]plugin\f[R].
See section VHPI for details on the VHPI implementation.
.TP
\f[B]\f[CB]--profile\f[B]\f[R]
Collect profiling data and print this at the end of the run.
Note this will slow down the simulation slightly.
.TP
\f[B]\f[CB]--stats\f[B]\f[R]
Print time and memory statistics at the end of the run.
.TP
\f[B]\f[CB]--stop-delta=\f[B]\f[R]\f[I]N\f[R]
Stop after \f[I]N\f[R] delta cycles.
This can be used to detect zero-time loops in your model.
The default is 1000 if not specified.
Setting this to zero disables the delta cycle limit.
.TP
\f[B]\f[CB]--stop-time=\f[B]\f[R]\f[I]T\f[R]
Stop the simulation after the given time has elapsed.
Format of \f[I]T\f[R] is an integer followed by a time unit in lower
case.
For example \f[C]5ns\f[R] or \f[C]20ms\f[R].
.TP
\f[B]\f[CB]--trace\f[B]\f[R]
Trace simulation events.
This is usually only useful for debugging the simulator.
.TP
\f[B]\f[CB]--vhpi-trace\f[B]\f[R]
Trace VHPI calls and events.
This can be useful for debugging VHPI plugins.
.TP
\f[B]\f[CB]-w, --wave=\f[B]\f[R]\f[I]file\f[R]
Write waveform data to \f[I]file\f[R].
The file name is optional and if not specified will default to the name
of the top-level unit with the appropriate extension for the waveform
format.
The waveform format can be specified with the \f[C]--format\f[R] option.
By default all signals in the design will be dumped: see the SELECTING
SIGNALS section below for how to control this.
.SS Make options
.TP
\f[B]\f[CB]--deps-only\f[B]\f[R]
Generate rules that only contain dependencies without actions.
These can be useful for inclusion in a hand written makefile.
.TP
\f[B]\f[CB]--posix\f[B]\f[R]
The generated makefile will work with any POSIX compliant make.
Otherwise the output may use extensions specific to GNU make.
.SH RELAXING RULES
.PP
The following can be specified as a comma-separated list to the
\f[C]--relax\f[R] option to disable certain semantic rule checks.
.TP
\f[B]\f[CB]prefer-explict\f[B]\f[R]
Any visible explicitly declared operator always hides an implicit
operator regardless of the region in which it is declared.
This is required to analyse code that uses the Synopsys
\f[C]std_logic_arith\f[R] package.
.TP
\f[B]\f[CB]locally-static\f[B]\f[R]
References to generics and array slices are allowed in locally static
expressions using the VHDL-2008 rules.
.TP
\f[B]\f[CB]universal-bound\f[B]\f[R]
Prior to VHDL-2000 when range bounds have universal integer type the
expressions must be either numeric literals or attributes.
This option allows ranges such as \f[C]-1 to 1\f[R] in VHDL-1993 which
otherwise must be written \f[C]integer\[aq](-1) to 1\f[R].
.TP
\f[B]\f[CB]pure-files\f[B]\f[R]
Pure functions are allowed to declare file objects.
.SH SELECTING SIGNALS
.PP
Every signal object in the design has a unique hierarchical path name.
This is identical to the value of the \f[C]PATH_NAME\f[R] attribute.
.PP
A signal can be referred to using its full path name, for example
\f[C]:top:sub:x\f[R], and \f[C]:top:other:x\f[R] are two different
signals.
The character \f[C]:\f[R] is a hierarchy separator.
A \f[I]glob\f[R] may be used refer to a group of signals.
For example \f[C]:top:*:x\f[R], \f[C]*:x\f[R], and \f[C]:top:sub:*\f[R],
all select both of the previous signals.
The special character \f[C]*\f[R] is a wildcard that matches zero or
more characters.
.SS Restricting waveform dumps
.PP
Path names and globs can be used to exclude or explicitly include
signals in a waveform dump.
For simple cases this can be done using the \f[C]--include\f[R] and
\f[C]--exclude\f[R] arguments.
For example \f[C]--exclude=\[dq]:top:sub:*\[dq]\f[R] will exclude all
matching signals from the waveform dump.
Multiple inclusion and exclusion patterns can be provided.
.PP
When the number of patterns becomes large, specifying them on the
command line is cumbersome.
Instead a text file can be used to provide inclusion and exclusion
patterns.
If the top-level unit name is \f[C]top\f[R] then inclusion patterns
should be placed in a file called \f[C]top.include\f[R] and exclusion
patterns in a file called \f[C]top.exclude\f[R].
These files should be in the working directory where the
\f[C]nvc -r\f[R] command is executed.
The format is one glob per line, with comments preceded by a \f[C]#\f[R]
character.
.PP
When both inclusion and exclusion patterns are present, exclusions have
precedence over inclusions.
If no inclusion patterns are present then all signals are implicitly
included.
.SH VHPI
.PP
NVC supports a subset of VHPI allowing access to signal values and
events at runtime.
The standard VHPI header file \f[C]vhpi_user.h\f[R] will be placed in
the system include directory as part of the installation process.
VHPI plugins should be compiled as shared libraries; for example:
.IP
.nf
\f[C]
$ cc -shared -fPIC my_plugin.c -o my_plugin.so
$ nvc -r --load my_plugin.so my_tb
\f[R]
.fi
.PP
The plugin should define a global \f[C]vhpi_startup_routines\f[R] which
is a NULL-terminated list of functions to call when the plugin is
loaded:
.IP
.nf
\f[C]
void (*vhpi_startup_routines[])() = {
   startup_1,
   startup_2,
   NULL
};
\f[R]
.fi
.PP
TODO: describe VHPI functions implemented
.SH LIBRARIES
.PP
Description of library search path, contents, etc.
.SH CODE COVERAGE
.PP
Description of coverage generation
.SH REPORTING BUGS
.PP
Report bugs using the GitHub issue tracker at
<https://github.com/nickg/nvc/issues>
.SH AUTHORS
Nick Gasson <nick@nickg.me.uk>.
